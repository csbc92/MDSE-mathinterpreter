/*
 * generated by Xtext 2.21.0
 */
package dk.chcla15.mathinterpreter.tests

import com.google.inject.Inject
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.MathExp
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.Number
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import static extension org.junit.Assert.*;
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.Parenthesis
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.Exp
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.Plus
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.Minus
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.Mult
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.Div

@ExtendWith(InjectionExtension)
@InjectWith(MathAssignmentLanguageInjectorProvider)
class MathAssignmentLanguageParsingTest {
	@Inject
	extension ParseHelper<MathExp> parseHelper
	
	@Test
	def void testParsingExpression() {
		"result is 10".parse.assertNotNull
	}
	
	@Test
	def void testPlusTwoNumbers() {
		'''
		result is 10+10
		'''.parse => [
			println(exp.stringRepr)
			
			(exp.left as Number).value.assertEquals(10)			
			(exp.right as Number).value.assertEquals(10)
		]
	}
	
	@Test
	def void testLeftPlusParenthesis() {
		'''
		result is (2+1)+3
		'''.parse => [
			println(exp.stringRepr)
			
			(exp.left as Parenthesis) => [
				(exp.left as Number).value.assertEquals(2)
				(exp.right as Number).value.assertEquals(1)
			]			
			(exp.right as Number).value.assertEquals(3)
		]
	}
	
	@Test
	def void testRightPlusParenthesis() {
		'''
		result is 2+(1+3)
		'''.parse => [
			println(exp.stringRepr)
			
			(exp.left as Number).value.assertEquals(2)
			(exp.right as Parenthesis) => [
				(exp.left as Number).value.assertEquals(1)
				(exp.right as Number).value.assertEquals(3)
			]	
		]
	}
	
	@Test
	def void testRightPlusParenthesis2() {
		'''
		result is 2*(1+3)
		'''.parse => [		
			println(exp.stringRepr)
			
			(exp.left as Number).value.assertEquals(2)
			(exp.right as Parenthesis) => [
				(exp.left as Number).value.assertEquals(1)
				(exp.right as Number).value.assertEquals(3)
			]	
		]
	}
	
	@Test
	def void testRightDivParenthesis() {
		'''
		result is 10-2*(1/2)
		'''.parse => [		
			println(exp.stringRepr)
			
			(exp.left as Number).value.assertEquals(10)
			(exp.right as Exp) => [
				(left as Number).value.assertEquals(2)
				(right as Parenthesis) => [
					(exp.left as Number).value.assertEquals(1)
					(exp.right as Number).value.assertEquals(2)
				]
			]	
		]
	}
	
	private def dispatch CharSequence stringRepr(Exp e ) {
		switch (e.operator) {
			Plus: '''«e.left.stringRepr»+«e.right.stringRepr»'''
			Minus: '''«e.left.stringRepr»-«e.right.stringRepr»''' 
			Mult: '''(«e.left.stringRepr»*«e.right.stringRepr»)'''
			Div: '''(«e.left.stringRepr»/«e.right.stringRepr»)'''
		}
	}
	
	private def dispatch CharSequence stringRepr(Number n) {
		n.value.toString
	}
	
	private def dispatch CharSequence stringRepr(Parenthesis p) {
		"(" + p.exp.stringRepr + ")"
	}
	
}
