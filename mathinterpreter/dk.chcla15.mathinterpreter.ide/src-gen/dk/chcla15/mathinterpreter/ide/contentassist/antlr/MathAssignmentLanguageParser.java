/*
 * generated by Xtext 2.21.0
 */
package dk.chcla15.mathinterpreter.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dk.chcla15.mathinterpreter.ide.contentassist.antlr.internal.InternalMathAssignmentLanguageParser;
import dk.chcla15.mathinterpreter.services.MathAssignmentLanguageGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MathAssignmentLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MathAssignmentLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MathAssignmentLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getExpOpAccess().getAlternatives(), "rule__ExpOp__Alternatives");
			builder.put(grammarAccess.getMultDivOpAccess().getAlternatives(), "rule__MultDivOp__Alternatives");
			builder.put(grammarAccess.getPlusMinusOpAccess().getAlternatives(), "rule__PlusMinusOp__Alternatives");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getMathExpAccess().getGroup(), "rule__MathExp__Group__0");
			builder.put(grammarAccess.getPlusMinusExpAccess().getGroup(), "rule__PlusMinusExp__Group__0");
			builder.put(grammarAccess.getPlusMinusExpAccess().getGroup_1(), "rule__PlusMinusExp__Group_1__0");
			builder.put(grammarAccess.getMulOrDivExpAccess().getGroup(), "rule__MulOrDivExp__Group__0");
			builder.put(grammarAccess.getMulOrDivExpAccess().getGroup_1(), "rule__MulOrDivExp__Group_1__0");
			builder.put(grammarAccess.getMultDivOpAccess().getGroup_0(), "rule__MultDivOp__Group_0__0");
			builder.put(grammarAccess.getMultDivOpAccess().getGroup_1(), "rule__MultDivOp__Group_1__0");
			builder.put(grammarAccess.getPlusMinusOpAccess().getGroup_0(), "rule__PlusMinusOp__Group_0__0");
			builder.put(grammarAccess.getPlusMinusOpAccess().getGroup_1(), "rule__PlusMinusOp__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getMathExpAccess().getExpAssignment_2(), "rule__MathExp__ExpAssignment_2");
			builder.put(grammarAccess.getPlusMinusExpAccess().getOperatorAssignment_1_1(), "rule__PlusMinusExp__OperatorAssignment_1_1");
			builder.put(grammarAccess.getPlusMinusExpAccess().getRightAssignment_1_2(), "rule__PlusMinusExp__RightAssignment_1_2");
			builder.put(grammarAccess.getMulOrDivExpAccess().getOperatorAssignment_1_1(), "rule__MulOrDivExp__OperatorAssignment_1_1");
			builder.put(grammarAccess.getMulOrDivExpAccess().getRightAssignment_1_2(), "rule__MulOrDivExp__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_0_1(), "rule__Primary__ValueAssignment_0_1");
			builder.put(grammarAccess.getPrimaryAccess().getExpAssignment_1_2(), "rule__Primary__ExpAssignment_1_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MathAssignmentLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalMathAssignmentLanguageParser createParser() {
		InternalMathAssignmentLanguageParser result = new InternalMathAssignmentLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MathAssignmentLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MathAssignmentLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
