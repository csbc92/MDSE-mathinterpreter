/*
 * generated by Xtext 2.21.0
 */
grammar InternalMathAssignmentLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package dk.chcla15.mathinterpreter.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package dk.chcla15.mathinterpreter.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import dk.chcla15.mathinterpreter.services.MathAssignmentLanguageGrammarAccess;

}
@parser::members {
	private MathAssignmentLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(MathAssignmentLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMathExp
entryRuleMathExp
:
{ before(grammarAccess.getMathExpRule()); }
	 ruleMathExp
{ after(grammarAccess.getMathExpRule()); } 
	 EOF 
;

// Rule MathExp
ruleMathExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMathExpAccess().getGroup()); }
		(rule__MathExp__Group__0)
		{ after(grammarAccess.getMathExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExp
entryRuleExp
:
{ before(grammarAccess.getExpRule()); }
	 ruleExp
{ after(grammarAccess.getExpRule()); } 
	 EOF 
;

// Rule Exp
ruleExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpAccess().getPlusMinusExpParserRuleCall()); }
		rulePlusMinusExp
		{ after(grammarAccess.getExpAccess().getPlusMinusExpParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusMinusExp
entryRulePlusMinusExp
:
{ before(grammarAccess.getPlusMinusExpRule()); }
	 rulePlusMinusExp
{ after(grammarAccess.getPlusMinusExpRule()); } 
	 EOF 
;

// Rule PlusMinusExp
rulePlusMinusExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusMinusExpAccess().getGroup()); }
		(rule__PlusMinusExp__Group__0)
		{ after(grammarAccess.getPlusMinusExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMulOrDivExp
entryRuleMulOrDivExp
:
{ before(grammarAccess.getMulOrDivExpRule()); }
	 ruleMulOrDivExp
{ after(grammarAccess.getMulOrDivExpRule()); } 
	 EOF 
;

// Rule MulOrDivExp
ruleMulOrDivExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMulOrDivExpAccess().getGroup()); }
		(rule__MulOrDivExp__Group__0)
		{ after(grammarAccess.getMulOrDivExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultDivOp
entryRuleMultDivOp
:
{ before(grammarAccess.getMultDivOpRule()); }
	 ruleMultDivOp
{ after(grammarAccess.getMultDivOpRule()); } 
	 EOF 
;

// Rule MultDivOp
ruleMultDivOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultDivOpAccess().getAlternatives()); }
		(rule__MultDivOp__Alternatives)
		{ after(grammarAccess.getMultDivOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusMinusOp
entryRulePlusMinusOp
:
{ before(grammarAccess.getPlusMinusOpRule()); }
	 rulePlusMinusOp
{ after(grammarAccess.getPlusMinusOpRule()); } 
	 EOF 
;

// Rule PlusMinusOp
rulePlusMinusOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusMinusOpAccess().getAlternatives()); }
		(rule__PlusMinusOp__Alternatives)
		{ after(grammarAccess.getPlusMinusOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDivOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultDivOpAccess().getGroup_0()); }
		(rule__MultDivOp__Group_0__0)
		{ after(grammarAccess.getMultDivOpAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultDivOpAccess().getGroup_1()); }
		(rule__MultDivOp__Group_1__0)
		{ after(grammarAccess.getMultDivOpAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusMinusOpAccess().getGroup_0()); }
		(rule__PlusMinusOp__Group_0__0)
		{ after(grammarAccess.getPlusMinusOpAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlusMinusOpAccess().getGroup_1()); }
		(rule__PlusMinusOp__Group_1__0)
		{ after(grammarAccess.getPlusMinusOpAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
		(rule__Primary__Group_0__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
		(rule__Primary__Group_1__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExp__Group__0__Impl
	rule__MathExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpAccess().getResultKeyword_0()); }
	'result'
	{ after(grammarAccess.getMathExpAccess().getResultKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExp__Group__1__Impl
	rule__MathExp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpAccess().getIsKeyword_1()); }
	'is'
	{ after(grammarAccess.getMathExpAccess().getIsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExp__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpAccess().getExpAssignment_2()); }
	(rule__MathExp__ExpAssignment_2)
	{ after(grammarAccess.getMathExpAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinusExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinusExp__Group__0__Impl
	rule__PlusMinusExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusExpAccess().getMulOrDivExpParserRuleCall_0()); }
	ruleMulOrDivExp
	{ after(grammarAccess.getPlusMinusExpAccess().getMulOrDivExpParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinusExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusExpAccess().getGroup_1()); }
	(rule__PlusMinusExp__Group_1__0)*
	{ after(grammarAccess.getPlusMinusExpAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinusExp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinusExp__Group_1__0__Impl
	rule__PlusMinusExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusExp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusExpAccess().getExpLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPlusMinusExpAccess().getExpLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusExp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinusExp__Group_1__1__Impl
	rule__PlusMinusExp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusExp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusExpAccess().getOperatorAssignment_1_1()); }
	(rule__PlusMinusExp__OperatorAssignment_1_1)
	{ after(grammarAccess.getPlusMinusExpAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusExp__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinusExp__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusExp__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusExpAccess().getRightAssignment_1_2()); }
	(rule__PlusMinusExp__RightAssignment_1_2)
	{ after(grammarAccess.getPlusMinusExpAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulOrDivExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDivExp__Group__0__Impl
	rule__MulOrDivExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDivExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivExpAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMulOrDivExpAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDivExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDivExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDivExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivExpAccess().getGroup_1()); }
	(rule__MulOrDivExp__Group_1__0)*
	{ after(grammarAccess.getMulOrDivExpAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulOrDivExp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDivExp__Group_1__0__Impl
	rule__MulOrDivExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDivExp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivExpAccess().getExpLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMulOrDivExpAccess().getExpLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDivExp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDivExp__Group_1__1__Impl
	rule__MulOrDivExp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDivExp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivExpAccess().getOperatorAssignment_1_1()); }
	(rule__MulOrDivExp__OperatorAssignment_1_1)
	{ after(grammarAccess.getMulOrDivExpAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDivExp__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDivExp__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDivExp__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivExpAccess().getRightAssignment_1_2()); }
	(rule__MulOrDivExp__RightAssignment_1_2)
	{ after(grammarAccess.getMulOrDivExpAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultDivOp__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDivOp__Group_0__0__Impl
	rule__MultDivOp__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDivOp__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDivOpAccess().getMultAction_0_0()); }
	()
	{ after(grammarAccess.getMultDivOpAccess().getMultAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDivOp__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDivOp__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDivOp__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDivOpAccess().getAsteriskKeyword_0_1()); }
	'*'
	{ after(grammarAccess.getMultDivOpAccess().getAsteriskKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultDivOp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDivOp__Group_1__0__Impl
	rule__MultDivOp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDivOp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDivOpAccess().getDivAction_1_0()); }
	()
	{ after(grammarAccess.getMultDivOpAccess().getDivAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDivOp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDivOp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDivOp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDivOpAccess().getSolidusKeyword_1_1()); }
	'/'
	{ after(grammarAccess.getMultDivOpAccess().getSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinusOp__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinusOp__Group_0__0__Impl
	rule__PlusMinusOp__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOp__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusOpAccess().getPlusAction_0_0()); }
	()
	{ after(grammarAccess.getPlusMinusOpAccess().getPlusAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOp__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinusOp__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOp__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusOpAccess().getPlusSignKeyword_0_1()); }
	'+'
	{ after(grammarAccess.getPlusMinusOpAccess().getPlusSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinusOp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinusOp__Group_1__0__Impl
	rule__PlusMinusOp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusOpAccess().getMinusAction_1_0()); }
	()
	{ after(grammarAccess.getPlusMinusOpAccess().getMinusAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinusOp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusOpAccess().getHyphenMinusKeyword_1_1()); }
	'-'
	{ after(grammarAccess.getPlusMinusOpAccess().getHyphenMinusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getNumberAction_0_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getNumberAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getValueAssignment_0_1()); }
	(rule__Primary__ValueAssignment_0_1)
	{ after(grammarAccess.getPrimaryAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getParenthesisAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getParenthesisAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_1()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__2__Impl
	rule__Primary__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpAssignment_1_2()); }
	(rule__Primary__ExpAssignment_1_2)
	{ after(grammarAccess.getPrimaryAccess().getExpAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MathExp__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpAccess().getExpExpParserRuleCall_2_0()); }
		ruleExp
		{ after(grammarAccess.getMathExpAccess().getExpExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusExp__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusMinusExpAccess().getOperatorPlusMinusOpParserRuleCall_1_1_0()); }
		rulePlusMinusOp
		{ after(grammarAccess.getPlusMinusExpAccess().getOperatorPlusMinusOpParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusExp__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusMinusExpAccess().getRightMulOrDivExpParserRuleCall_1_2_0()); }
		ruleMulOrDivExp
		{ after(grammarAccess.getPlusMinusExpAccess().getRightMulOrDivExpParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDivExp__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivExpAccess().getOperatorMultDivOpParserRuleCall_1_1_0()); }
		ruleMultDivOp
		{ after(grammarAccess.getMulOrDivExpAccess().getOperatorMultDivOpParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDivExp__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivExpAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMulOrDivExpAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getValueINTTerminalRuleCall_0_1_0()); }
		RULE_INT
		{ after(grammarAccess.getPrimaryAccess().getValueINTTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ExpAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getExpExpParserRuleCall_1_2_0()); }
		ruleExp
		{ after(grammarAccess.getPrimaryAccess().getExpExpParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
