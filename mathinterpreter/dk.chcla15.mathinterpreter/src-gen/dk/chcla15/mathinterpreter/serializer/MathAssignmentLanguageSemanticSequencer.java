/*
 * generated by Xtext 2.21.0
 */
package dk.chcla15.mathinterpreter.serializer;

import com.google.inject.Inject;
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.Div;
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.Exp;
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.MathAssignmentLanguagePackage;
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.MathExp;
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.Minus;
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.Mult;
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.Parenthesis;
import dk.chcla15.mathinterpreter.mathAssignmentLanguage.Plus;
import dk.chcla15.mathinterpreter.services.MathAssignmentLanguageGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MathAssignmentLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MathAssignmentLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MathAssignmentLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MathAssignmentLanguagePackage.DIV:
				sequence_MultDivOp(context, (Div) semanticObject); 
				return; 
			case MathAssignmentLanguagePackage.EXP:
				if (rule == grammarAccess.getMulOrDivExpRule()
						|| action == grammarAccess.getMulOrDivExpAccess().getExpLeftAction_1_0()) {
					sequence_MulOrDivExp(context, (Exp) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpRule()
						|| rule == grammarAccess.getPlusMinusExpRule()
						|| action == grammarAccess.getPlusMinusExpAccess().getExpLeftAction_1_0()) {
					sequence_MulOrDivExp_PlusMinusExp(context, (Exp) semanticObject); 
					return; 
				}
				else break;
			case MathAssignmentLanguagePackage.MATH_EXP:
				sequence_MathExp(context, (MathExp) semanticObject); 
				return; 
			case MathAssignmentLanguagePackage.MINUS:
				sequence_PlusMinusOp(context, (Minus) semanticObject); 
				return; 
			case MathAssignmentLanguagePackage.MULT:
				sequence_MultDivOp(context, (Mult) semanticObject); 
				return; 
			case MathAssignmentLanguagePackage.NUMBER:
				sequence_Primary(context, (dk.chcla15.mathinterpreter.mathAssignmentLanguage.Number) semanticObject); 
				return; 
			case MathAssignmentLanguagePackage.PARENTHESIS:
				sequence_Primary(context, (Parenthesis) semanticObject); 
				return; 
			case MathAssignmentLanguagePackage.PLUS:
				sequence_PlusMinusOp(context, (Plus) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     MathExp returns MathExp
	 *
	 * Constraint:
	 *     exp=Exp
	 */
	protected void sequence_MathExp(ISerializationContext context, MathExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.MATH_EXP__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.MATH_EXP__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMathExpAccess().getExpExpParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MulOrDivExp returns Exp
	 *     MulOrDivExp.Exp_1_0 returns Exp
	 *
	 * Constraint:
	 *     (left=MulOrDivExp_Exp_1_0 operator=MultDivOp right=Primary)
	 */
	protected void sequence_MulOrDivExp(ISerializationContext context, Exp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.EXP__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.EXP__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.EXP__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.EXP__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.EXP__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.EXP__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMulOrDivExpAccess().getExpLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMulOrDivExpAccess().getOperatorMultDivOpParserRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getMulOrDivExpAccess().getRightPrimaryParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Exp
	 *     PlusMinusExp returns Exp
	 *     PlusMinusExp.Exp_1_0 returns Exp
	 *
	 * Constraint:
	 *     ((left=PlusMinusExp_Exp_1_0 operator=PlusMinusOp right=MulOrDivExp) | (left=MulOrDivExp_Exp_1_0 operator=MultDivOp right=Primary))
	 */
	protected void sequence_MulOrDivExp_PlusMinusExp(ISerializationContext context, Exp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpOp returns Div
	 *     MultDivOp returns Div
	 *
	 * Constraint:
	 *     {Div}
	 */
	protected void sequence_MultDivOp(ISerializationContext context, Div semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpOp returns Mult
	 *     MultDivOp returns Mult
	 *
	 * Constraint:
	 *     {Mult}
	 */
	protected void sequence_MultDivOp(ISerializationContext context, Mult semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpOp returns Minus
	 *     PlusMinusOp returns Minus
	 *
	 * Constraint:
	 *     {Minus}
	 */
	protected void sequence_PlusMinusOp(ISerializationContext context, Minus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpOp returns Plus
	 *     PlusMinusOp returns Plus
	 *
	 * Constraint:
	 *     {Plus}
	 */
	protected void sequence_PlusMinusOp(ISerializationContext context, Plus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Number
	 *     PlusMinusExp returns Number
	 *     PlusMinusExp.Exp_1_0 returns Number
	 *     MulOrDivExp returns Number
	 *     MulOrDivExp.Exp_1_0 returns Number
	 *     Primary returns Number
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Primary(ISerializationContext context, dk.chcla15.mathinterpreter.mathAssignmentLanguage.Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getValueINTTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Parenthesis
	 *     PlusMinusExp returns Parenthesis
	 *     PlusMinusExp.Exp_1_0 returns Parenthesis
	 *     MulOrDivExp returns Parenthesis
	 *     MulOrDivExp.Exp_1_0 returns Parenthesis
	 *     Primary returns Parenthesis
	 *
	 * Constraint:
	 *     exp=Exp
	 */
	protected void sequence_Primary(ISerializationContext context, Parenthesis semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathAssignmentLanguagePackage.Literals.PARENTHESIS__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathAssignmentLanguagePackage.Literals.PARENTHESIS__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getExpExpParserRuleCall_1_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
}
