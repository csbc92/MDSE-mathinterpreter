/*
 * generated by Xtext 2.21.0
 */
grammar InternalMathAssignmentLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package dk.chcla15.mathinterpreter.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dk.chcla15.mathinterpreter.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dk.chcla15.mathinterpreter.services.MathAssignmentLanguageGrammarAccess;

}

@parser::members {

 	private MathAssignmentLanguageGrammarAccess grammarAccess;

    public InternalMathAssignmentLanguageParser(TokenStream input, MathAssignmentLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MathExp";
   	}

   	@Override
   	protected MathAssignmentLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMathExp
entryRuleMathExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathExpRule()); }
	iv_ruleMathExp=ruleMathExp
	{ $current=$iv_ruleMathExp.current; }
	EOF;

// Rule MathExp
ruleMathExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='result'
		{
			newLeafNode(otherlv_0, grammarAccess.getMathExpAccess().getResultKeyword_0());
		}
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getMathExpAccess().getIsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMathExpAccess().getExpExpParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMathExpRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"dk.chcla15.mathinterpreter.MathAssignmentLanguage.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExp
entryRuleExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpRule()); }
	iv_ruleExp=ruleExp
	{ $current=$iv_ruleExp.current; }
	EOF;

// Rule Exp
ruleExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpAccess().getPlusMinusExpParserRuleCall());
	}
	this_PlusMinusExp_0=rulePlusMinusExp
	{
		$current = $this_PlusMinusExp_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulePlusMinusExp
entryRulePlusMinusExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusMinusExpRule()); }
	iv_rulePlusMinusExp=rulePlusMinusExp
	{ $current=$iv_rulePlusMinusExp.current; }
	EOF;

// Rule PlusMinusExp
rulePlusMinusExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlusMinusExpAccess().getMulOrDivExpParserRuleCall_0());
		}
		this_MulOrDivExp_0=ruleMulOrDivExp
		{
			$current = $this_MulOrDivExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPlusMinusExpAccess().getExpLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusMinusExpAccess().getOperatorPlusMinusOpParserRuleCall_1_1_0());
					}
					lv_operator_2_0=rulePlusMinusOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusMinusExpRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"dk.chcla15.mathinterpreter.MathAssignmentLanguage.PlusMinusOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusMinusExpAccess().getRightMulOrDivExpParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMulOrDivExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusMinusExpRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"dk.chcla15.mathinterpreter.MathAssignmentLanguage.MulOrDivExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulOrDivExp
entryRuleMulOrDivExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulOrDivExpRule()); }
	iv_ruleMulOrDivExp=ruleMulOrDivExp
	{ $current=$iv_ruleMulOrDivExp.current; }
	EOF;

// Rule MulOrDivExp
ruleMulOrDivExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulOrDivExpAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMulOrDivExpAccess().getExpLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulOrDivExpAccess().getOperatorMultDivOpParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleMultDivOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulOrDivExpRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"dk.chcla15.mathinterpreter.MathAssignmentLanguage.MultDivOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulOrDivExpAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulOrDivExpRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"dk.chcla15.mathinterpreter.MathAssignmentLanguage.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultDivOp
entryRuleMultDivOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultDivOpRule()); }
	iv_ruleMultDivOp=ruleMultDivOp
	{ $current=$iv_ruleMultDivOp.current; }
	EOF;

// Rule MultDivOp
ruleMultDivOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getMultDivOpAccess().getMultAction_0_0(),
						$current);
				}
			)
			otherlv_1='*'
			{
				newLeafNode(otherlv_1, grammarAccess.getMultDivOpAccess().getAsteriskKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getMultDivOpAccess().getDivAction_1_0(),
						$current);
				}
			)
			otherlv_3='/'
			{
				newLeafNode(otherlv_3, grammarAccess.getMultDivOpAccess().getSolidusKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRulePlusMinusOp
entryRulePlusMinusOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusMinusOpRule()); }
	iv_rulePlusMinusOp=rulePlusMinusOp
	{ $current=$iv_rulePlusMinusOp.current; }
	EOF;

// Rule PlusMinusOp
rulePlusMinusOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPlusMinusOpAccess().getPlusAction_0_0(),
						$current);
				}
			)
			otherlv_1='+'
			{
				newLeafNode(otherlv_1, grammarAccess.getPlusMinusOpAccess().getPlusSignKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPlusMinusOpAccess().getMinusAction_1_0(),
						$current);
				}
			)
			otherlv_3='-'
			{
				newLeafNode(otherlv_3, grammarAccess.getPlusMinusOpAccess().getHyphenMinusKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNumberAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_INT
					{
						newLeafNode(lv_value_1_0, grammarAccess.getPrimaryAccess().getValueINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getParenthesisAction_1_0(),
						$current);
				}
			)
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpExpParserRuleCall_1_2_0());
					}
					lv_exp_4_0=ruleExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"exp",
							lv_exp_4_0,
							"dk.chcla15.mathinterpreter.MathAssignmentLanguage.Exp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
